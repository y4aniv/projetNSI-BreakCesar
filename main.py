## BreakCesar
## Auteur: Oc√©anely TRUONG & Yaniv DOUIEB

## Importation des modules
import streamlit as st

## Dictionnaire des lettres les plus fr√©quentes dans chaque langage
freq_lang = {
    "Anglais": "e",
    "Fran√ßais": "e",
    "Allemand": "e",
    "Espagnol": "e",
    "Portugais": "a",
    "Italien": "e",
    "Turc": "a",
    "Su√©dois": "e",
    "Polonais": "a",
    "N√©erlandais": "e",
    "Danois": "e",
    "Islandais": "a",
    "Finnois": "a",
    "Tch√®que": "a",
    "Lituanien": "i"
}

def freq_analyse(text):
    """
    Fonction qui analyse la fr√©quence des lettres dans un texte
    :entr√©e -> text (str)
    :sortie -> freq (dict)
    """

    ## Initialisation du dictionnaire de fr√©quence
    freq = {}

    ## Parcours du texte
    for c in text:

        ## Si la lettre est une majuscule, on la met en minuscule
        c = c.lower()

        ## V√©rification que la lettre est bien une lettre de l'alphabet (a-z)
        if c.isalpha() == False:

            ## Si ce n'est pas le cas, on passe √† la lettre suivante
            continue

        ## Si la lettre est d√©j√† dans le dictionnaire, on ajoute 1 √† sa fr√©quence
        if c in freq:
            freq[c] += 1

        ## Sinon, on l'ajoute au dictionnaire avec une fr√©quence de 1
        else:
            freq[c] = 1
    return freq

def freq_prc(freq):
    """
    Fonction qui calcule la fr√©quence en pourcentage
    :entr√©e -> freq (dict)
    :sortie -> freq (dict)
    """

    ## Initialisation de la somme des fr√©quences
    total = 0

    ## Parcours du dictionnaire de fr√©quence
    for c in freq:

        ## Ajout de la fr√©quence au total
        total += freq[c]

    ## Parcours du dictionnaire de fr√©quence
    for c in freq:

        ## Calcul de la fr√©quence en pourcentage
        freq[c] = (freq[c] / total) * 100

    return freq

def max_char(freq):
    """
    Fonction qui renvoie la lettre la plus fr√©quente dans un texte
    :entr√©e -> freq (dict)
    :sortie -> max (str)
    """

    ## Initialisation de la lettre la plus fr√©quente
    max = ""

    ## Parcours du dictionnaire de fr√©quence
    for c in freq:

        ## Si la lettre est plus fr√©quente que la lettre max, on la remplace
        if max == "" or freq[c] > freq[max]:
            max = c

    return max

def diff_char(char1, char2):
    """
    Fonction qui calcule la diff√©rence entre deux lettres
    :entr√©e -> char1 (str), char2 (str)
    :sortie -> diff (int)
    """

    ## On r√©cup√®re la position de la lettre char1 dans l'alphabet
    pos1 = ord(char1) - 97 ## 97 car 97 correspond √† la lettre a en ASCII

    ## On r√©cup√®re la position de la lettre char2 dans l'alphabet
    pos2 = ord(char2) - 97 ## 97 car 97 correspond √† la lettre a en ASCII

    ## On calcule la diff√©rence entre les deux positions
    diff = pos2 - pos1

    return diff

def break_cesar(text, lang="Fran√ßais"):
    """
    Fonction qui casse un code C√©sar
    :entr√©e -> text (str)
    :sortie -> text (str)
    """

    ## On analyse la fr√©quence des lettres dans le texte
    freq = freq_analyse(text)

    ## On calcule la fr√©quence en pourcentage
    freq = freq_prc(freq)

    ## On r√©cup√®re la lettre la plus fr√©quente
    max = max_char(freq)

    ## On calcule la diff√©rence entre la lettre la plus fr√©quente et la lettre la plus frequente de chaque langage
    diff = diff_char(max, freq_lang[lang])

    ## On initialise le texte d√©chiffr√©
    text_dec = ""

    ## On parcourt le texte
    for c in text:

        ## Si la lettre est une majuscule, on la met en minuscule
        c = c.lower()

        ## Si la lettre est une lettre de l'alphabet (a-z)
        if c in "abcdefghijklmnopqrstuvwxyz":

            ## On r√©cup√®re la position de la lettre dans l'alphabet
            pos = ord(c) - 97 ## 97 car 97 correspond √† la lettre a en ASCII

            ## On calcule la nouvelle position de la lettre
            new_pos = (pos + diff) % 26

            ## On calcule la nouvelle lettre
            new_c = chr(new_pos + 97) ## 97 car 97 correspond √† la lettre a en ASCII

            ## On ajoute la nouvelle lettre au texte d√©chiffr√©
            text_dec += new_c

        ## Sinon, on ajoute la lettre au texte d√©chiffr√©
        else:
            text_dec += c

    return text_dec

## Interface graphique

## Configuration de la page
st.set_page_config(page_title="BreakCesar", page_icon="üîì", layout="centered", initial_sidebar_state="auto")

## Titre de la page et sous-titre
st.title("üîì BreakCesar")
st.subheader("D√©chiffrement automatique d'un code C√©sar")

## D√©monstration du programme
st.write("## D√©monstration")

## Choix de la langue et du fichier
lang = st.selectbox("Choisissez une langue", ("Fran√ßais", "Anglais", "Allemand", "Espagnol", "Portugais", "Italien", "Turc", "Su√©dois", "Polonais", "N√©erlandais", "Danois", "Islandais", "Finnois", "Tch√®que", "Lituanien"))
cryptedFile = st.file_uploader("Choisissez un fichier texte chiffr√© (.txt)", type=["txt"])

## Si le fichier est bien un fichier texte
if cryptedFile is not None:

    ## On r√©cup√®re le contenu du fichier
    bytes_data = cryptedFile.getvalue()

    ## On affiche le contenu du fichier
    st.write("## Texte chiffr√©")
    st.write(bytes_data.decode("utf-8"))

    ## On affiche le texte d√©chiffr√©
    st.write("## Texte d√©chiffr√©")
    st.write(break_cesar(bytes_data.decode("utf-8"), lang))

    ## On affiche des informations sur le texte
    st.write("## Informations")

    ## On affiche la fr√©quence des lettres du texte chiffr√© et du texte d√©chiffr√©
    st.write("### Fr√©quence des lettres du texte chiffr√©")
    st.bar_chart(freq_analyse(bytes_data.decode("utf-8")))
    st.write("### Fr√©quence des lettres du texte d√©chiffr√©")
    st.bar_chart(freq_analyse(break_cesar(bytes_data.decode("utf-8"), lang)))

    ## On affiche la cl√© de chiffrement (valeur estim√©e)
    diff = abs(diff_char(max_char(freq_analyse(bytes_data.decode('utf-8'))), freq_lang[lang]))
    st.write(f"### Cl√© de chiffrement (valeur estim√©e) : {diff}")
    st.write(f"La cl√© de chiffrement est une valeur estim√©e √©tant donn√© que, d√®s que l'on atteint le chiffre 26, l'alphabet recommence. Ainsi, plusieurs cl√©s de chiffrement peuvent √™tre g√©n√©r√©es.")
    st.write(f"D'autres cl√© de chiffrement sont possibles, telles que : **{diff+26}, {diff+52}, ...**")
    st.write(f'La valeur **{diff}** est la plus petite possible et repr√©sente le nombre de lettres √† d√©caler pour chiffrer le texte.')