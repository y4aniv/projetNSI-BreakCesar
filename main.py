## Importation des modules
import streamlit as st

## Dictionnaire des lettres les plus frÃ©quentes dans chaque langage
freq_lang = {
    "Anglais": "e",
    "FranÃ§ais": "e",
    "Allemand": "e",
    "Espagnol": "e",
    "Portugais": "a",
    "Italien": "e",
    "Turc": "a",
    "SuÃ©dois": "e",
    "Polonais": "a",
    "NÃ©erlandais": "e",
    "Danois": "e",
    "Islandais": "a",
    "Finnois": "a",
    "TchÃ¨que": "a",
    "Lituanien": "i"
}

def analyse_frequence(texte):
    """
    Fonction qui analyse la frÃ©quence des lettres dans un texte
    :entrÃ©e -> texte (str)
    :sortie -> freq (dict)
    """

    ## Initialisation du dictionnaire de frÃ©quence
    freq = {}

    ## Parcours du texte
    for caractere in texte:

        ## Si le caractÃ¨re est une majuscule, on le met en minuscule
        caractere = caractere.lower()

        ## VÃ©rification que le caractÃ¨re est bien une lettre de l'alphabet (a-z)
        if not caractere.isalpha():

            ## Si ce n'est pas le cas, on passe au caractÃ¨re suivant
            continue

        ## Si le caractÃ¨re est dÃ©jÃ  dans le dictionnaire, on ajoute 1 Ã  sa frÃ©quence
        if caractere in freq:
            freq[caractere] += 1

        ## Sinon, on l'ajoute au dictionnaire avec une frÃ©quence de 1
        else:
            freq[caractere] = 1
    return freq

def pourcentage_frequence(freq):
    """
    Fonction qui calcule la frÃ©quence en pourcentage
    :entrÃ©e -> freq (dict)
    :sortie -> freq (dict)
    """

    total = sum(freq[caractere] for caractere in freq)
    ## Parcours du dictionnaire de frÃ©quence
    for caractere in freq:

        ## Calcul de la frÃ©quence en pourcentage
        freq[caractere] = (freq[caractere] / total) * 100

    return freq

def caractere_plus_frequent(freq):
    """
    Fonction qui renvoie la lettre la plus frÃ©quente dans un texte
    :entrÃ©e -> freq (dict)
    :sortie -> max (str)
    """

    ## Initialisation de la lettre la plus frÃ©quente
    max_caractere = ""

    ## Parcours du dictionnaire de frÃ©quence
    for caractere in freq:

        ## Si le caractÃ¨re est plus frÃ©quent que le caractÃ¨re max, on le remplace
        if max_caractere == "" or freq[caractere] > freq[max_caractere]:
            max_caractere = caractere

    return max_caractere

def difference_caracteres(caractere1, caractere2):
    """
    Fonction qui calcule la diffÃ©rence entre deux lettres
    :entrÃ©e -> caractere1 (str), caractere2 (str)
    :sortie -> diff (int)
    """

    ## On rÃ©cupÃ¨re la position du caractÃ¨re caractere1 dans l'alphabet
    pos1 = ord(caractere1) - 97 ## 97 car 97 correspond Ã  la lettre a en ASCII

    ## On rÃ©cupÃ¨re la position du caractÃ¨re caractere2 dans l'alphabet
    pos2 = ord(caractere2) - 97 ## 97 car 97 correspond Ã  la lettre a en ASCII

    return pos2 - pos1

def dechiffrer_cesar(texte, lang="FranÃ§ais"):
    """
    Fonction qui casse un code CÃ©sar
    :entrÃ©e -> texte (str)
    :sortie -> texte (str)
    """

    ## On analyse la frÃ©quence des lettres dans le texte
    freq = analyse_frequence(texte)

    ## On calcule la frÃ©quence en pourcentage
    freq = pourcentage_frequence(freq)

    ## On rÃ©cupÃ¨re la lettre la plus frÃ©quente
    max_caractere = caractere_plus_frequent(freq)

    ## On calcule la diffÃ©rence entre la lettre la plus frÃ©quente et la lettre la plus frÃ©quente de chaque langage
    diff = difference_caracteres(max_caractere, freq_lang[lang])

    ## On initialise le texte dÃ©chiffrÃ©
    texte_dechiffre = ""

    ## On parcourt le texte
    for caractere in texte:

        ## Si le caractÃ¨re est une majuscule, on le met en minuscule
        caractere = caractere.lower()

        ## Si le caractÃ¨re est une lettre de l'alphabet (a-z)
        if caractere in "abcdefghijklmnopqrstuvwxyz":

            ## On rÃ©cupÃ¨re la position du caractÃ¨re dans l'alphabet
            pos = ord(caractere) - 97 ## 97 car 97 correspond Ã  la lettre a en ASCII

            ## On calcule la nouvelle position du caractÃ¨re
            nouvelle_pos = (pos + diff) % 26

            ## On calcule le nouveau caractÃ¨re
            nouveau_caractere = chr(nouvelle_pos + 97) ## 97 car 97 correspond Ã  la lettre a en ASCII

            ## On ajoute le nouveau caractÃ¨re au texte dÃ©chiffrÃ©
            texte_dechiffre += nouveau_caractere

        ## Sinon, on ajoute le caractÃ¨re au texte dÃ©chiffrÃ©
        else:
            texte_dechiffre += caractere

    return texte_dechiffre

## Interface graphique

## Configuration de la page
st.set_page_config(page_title="BreakCesar", page_icon="ğŸ”“", layout="centered", initial_sidebar_state="auto")

## Titre de la page et sous-titre
st.title("ğŸ”“ BreakCesar")
st.subheader("DÃ©chiffrement automatique d'un code CÃ©sar")

## DÃ©monstration du programme
st.write("## DÃ©monstration")

## Choix de la langue et du fichier
langue = st.selectbox("Choisissez une langue", ("FranÃ§ais", "Anglais", "Allemand", "Espagnol", "Portugais", "Italien", "Turc", "SuÃ©dois", "Polonais", "NÃ©erlandais", "Danois", "Islandais", "Finnois", "TchÃ¨que", "Lituanien"))
fichier_chiffre = st.file_uploader("Choisissez un fichier texte chiffrÃ© (.txt)", type=["txt"])
demo_frLong = st.button("Test en FranÃ§ais [925 caractÃ¨res] > ClÃ© de chiffrement : 5")
demo_trLong = st.button("Test en Turc [710 caractÃ¨res] > ClÃ© de chiffrement : 18")
demo_enCourt = st.button("Test en Anglais [29 caractÃ¨res] > ClÃ© de chiffrement : 1")
demo_frAsLt = st.button("Test d'un texte en FranÃ§ais dÃ©chiffrÃ© en Lituanien [925 caractÃ¨res] > ClÃ© de chiffrement : 5")

## Si le fichier est bien un fichier texte
if fichier_chiffre is not None or demo_frLong or demo_trLong or demo_enCourt or demo_frAsLt:

    ## On rÃ©cupÃ¨re le contenu du fichier en fonction du choix de l'utilisateur
    if demo_frLong:
        donnees_crypter = "Jqqj jsatnj qj rfszxhwny Ã  Xnrtsj ij Gjfzatnw vzn xtzynjsy xf uzgqnhfynts fzc Ã‰inyntsx Lfqqnrfwi. Zsj htwwjxutsifshj x'Ã©yfgqny jsywj jqqjx Ã  qf kns ijx fssÃ©jx 1960. Jqqj qzn jcuwnrj fnsxn xjx jxuÃ©wfshjx jy xjx fyyjsyjx anx-Ã -anx i'zsj uzgqnhfynts ufw Lfqqnrfwi, zsj rfnxts i'Ã©inynts Ã  qf stytwnÃ©yÃ© nsyjwsfyntsfqj : Â« Xn atzx xfanje hj vzj o'fyyjsix ij hjyyj uzgqnhfynts ! Qf wzuyzwj fajh zsj anj ij wtzynsj jy ij wÃ©xnlsfynts, qf kznyj js ufdx Ã©ywfsljw, q'nsiÃ©ujsifshj ufw qj ywfafnq. Atzx atdje vz'nq sj x'flny ufx xnruqjrjsy utzw rtn i'zsj xnruqj vzjxynts ij afsnyÃ©. Utzw tgyjsnw q'fzytwnxfynts ij xtwynj, nq stzx kfzy i'fgtwi zsj fzytwnxfynts rfwnyfqj, uznx zsj fzywj tkknhnjqqj. Â», Ã©hwny-jqqj ifsx zs htzwwnjw ifyÃ© iz 23 iÃ©hjrgwj 196722. Uznx ifsx zs fzywj htzwwnjw, ifyÃ© hjyyj ktnx iz 5 ofsanjw 1968, jqqj Ã©hwny jshtwj : Â« Oj hwfnsx gjfzhtzu ij s'fatnw ufx fxxje i'fwljsy inxutsngqj utzw atdfljw ozxvz'Ã  Ufwnx. Oj htruyfnx ozxyjrjsy xzw zsj fafshj ij Lfqqnrfwi utzw qj kfnwj. Rts rfwn utzwwfny r'fnijw rfnx oj sj qj ajzc ufx. Stzx sj xtrrjx ufx js ywÃ¨x gtsx yjwrjx jy oj anx Ã  xjx hwthmjyx ijuznx ansly fsx"
        langue = "FranÃ§ais"
    elif demo_trLong:
        donnees_crypter = "Ewjzsts twf Sda. TmjskÄ± twfae gvse. Gvsevs rsesf ywÃ§ajewqa Ã§gc kwnwjae. Karw gvseÄ± sfdslesc aklaqgjme. GvseÄ± csjvwÅŸaedw hsqdsÅŸÄ±jÄ±e. VmnsjdsjÄ±fÄ±f jwfya esnavaj. Esna twfae wf kwnvaÄŸae jwfclaj. Ã‡sdÄ±ÅŸes eskse hwfuwjwfaf qsfÄ±fvsvÄ±j. Kstsz mqsfÄ±j mqsfesr hwfuwjwqa sÃ§sjÄ±e nw tajsr lwear zsns sdÄ±jÄ±e. TadyaksqsjÄ±e Ã§sdÄ±ÅŸes eskseÄ±f Ã¼klÃ¼fvwvaj. CsjvwÅŸae tskcwltgd gqfsesqÄ± Ã§gc kwnwj. Tm qÃ¼rvwf qslsÄŸÄ±fÄ±f sdlÄ±fvs taj tskcwltgd lghm nsjvÄ±j. Vmnsjvs vs tskcwltgd gqmfumdsjÄ±fÄ±f jwkaedwja nsjvÄ±j. CsjvwÅŸae tadyaksqsj gqmfdsjÄ±fÄ± kwnewr ses twf Ã§gc kwnwjae. Wf kwnvaÄŸae tadyaksqsj gqmfm sjsts qsjÄ±ÅŸÄ±vÄ±j. Ã–vwndwjaea qshlÄ±clsf kgfjs tajsr tadyaksqsj gqmfm gqfsj tajsr vs calsh gcmjme. YÃ¼fÃ¼f tÃ¼qÃ¼c cÄ±keÄ±fÄ± gvsevs ywÃ§ajajae. Tm qÃ¼rvwf gvseÄ±f lwear nw vÃ¼rwfda gdeskÄ±fs Ã§gc Ã¶fwe nwjajae. Fw vwjdwj tadajkafar: Skdsf qsllÄ±ÄŸÄ± qwjvwf twdda gdmj."
        langue = "Turc"
    elif demo_enCourt:
        donnees_crypter = "Ifmmp Xpsme! J'n Cpoe, Kbnft Cpoe."
        langue = "Anglais"
    elif demo_frAsLt:
        donnees_crypter = "Jqqj jsatnj qj rfszxhwny Ã  Xnrtsj ij Gjfzatnw vzn xtzynjsy xf uzgqnhfynts fzc Ã‰inyntsx Lfqqnrfwi. Zsj htwwjxutsifshj x'Ã©yfgqny jsywj jqqjx Ã  qf kns ijx fssÃ©jx 1960. Jqqj qzn jcuwnrj fnsxn xjx jxuÃ©wfshjx jy xjx fyyjsyjx anx-Ã -anx i'zsj uzgqnhfynts ufw Lfqqnrfwi, zsj rfnxts i'Ã©inynts Ã  qf stytwnÃ©yÃ© nsyjwsfyntsfqj : Â« Xn atzx xfanje hj vzj o'fyyjsix ij hjyyj uzgqnhfynts ! Qf wzuyzwj fajh zsj anj ij wtzynsj jy ij wÃ©xnlsfynts, qf kznyj js ufdx Ã©ywfsljw, q'nsiÃ©ujsifshj ufw qj ywfafnq. Atzx atdje vz'nq sj x'flny ufx xnruqjrjsy utzw rtn i'zsj xnruqj vzjxynts ij afsnyÃ©. Utzw tgyjsnw q'fzytwnxfynts ij xtwynj, nq stzx kfzy i'fgtwi zsj fzytwnxfynts rfwnyfqj, uznx zsj fzywj tkknhnjqqj. Â», Ã©hwny-jqqj ifsx zs htzwwnjw ifyÃ© iz 23 iÃ©hjrgwj 196722. Uznx ifsx zs fzywj htzwwnjw, ifyÃ© hjyyj ktnx iz 5 ofsanjw 1968, jqqj Ã©hwny jshtwj : Â« Oj hwfnsx gjfzhtzu ij s'fatnw ufx fxxje i'fwljsy inxutsngqj utzw atdfljw ozxvz'Ã  Ufwnx. Oj htruyfnx ozxyjrjsy xzw zsj fafshj ij Lfqqnrfwi utzw qj kfnwj. Rts rfwn utzwwfny r'fnijw rfnx oj sj qj ajzc ufx. Stzx sj xtrrjx ufx js ywÃ¨x gtsx yjwrjx jy oj anx Ã  xjx hwthmjyx ijuznx ansly fsx"
        langue = "Lituanien"
    elif fichier_chiffre:

        ## On rÃ©cupÃ¨re le contenu du fichier et on le dÃ©code en UTF-8
        donnees_crypter = fichier_chiffre.read().decode("utf-8")

    ## On affiche le contenu du fichier
    st.write("## Texte chiffrÃ©")
    st.write(donnees_crypter)

    ## On affiche le texte dÃ©chiffrÃ©
    st.write("## Texte dÃ©chiffrÃ©")
    st.write(dechiffrer_cesar(donnees_crypter, langue))

    ## On affiche des informations sur le texte
    st.write("## Informations")
    diff = abs(difference_caracteres(caractere_plus_frequent(analyse_frequence(donnees_crypter)), freq_lang[langue]))

    ## On affiche la lettre la plus frÃ©quente de la langue choisie et la transformation de la lettre la plus frÃ©quente de la langue choisie aprÃ¨s chiffrement
    st.info(f"La lettre la plus frÃ©quente en **{langue}** est **{freq_lang[langue].upper()}**")
    st.info(f"Avec une clÃ© de **{diff}**, la lettre **{freq_lang[langue].upper()}** devient **{caractere_plus_frequent(analyse_frequence(donnees_crypter)).upper()}** aprÃ¨s chiffrement")

    ## On affiche la frÃ©quence des lettres du texte chiffrÃ© et du texte dÃ©chiffrÃ©
    st.write("### FrÃ©quence des lettres du texte chiffrÃ©")
    st.bar_chart(analyse_frequence(donnees_crypter))
    st.write("### FrÃ©quence des lettres du texte dÃ©chiffrÃ©")
    st.bar_chart(analyse_frequence(dechiffrer_cesar(donnees_crypter, langue)))

    ## On affiche la clÃ© de chiffrement (valeur estimÃ©e)
    st.write(f"### ClÃ© de chiffrement (valeur estimÃ©e) : {diff}")
    st.write(
        "La clÃ© de chiffrement est une valeur estimÃ©e Ã©tant donnÃ© que, dÃ¨s que l'on atteint le chiffre 26, l'alphabet recommence. Ainsi, plusieurs clÃ©s de chiffrement peuvent Ãªtre gÃ©nÃ©rÃ©es."
    )
    st.write(f"D'autres clÃ©s de chiffrement sont possibles, telles que : **{diff+26}, {diff+52}, ...**")
    st.write(f'La valeur **{diff}** est la plus petite possible et reprÃ©sente le nombre de lettres Ã  dÃ©caler pour chiffrer le texte.')